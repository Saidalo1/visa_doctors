"""Telegram notification functionality."""
import asyncio
import logging
import threading
from asgiref.sync import sync_to_async
from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from django.conf import settings
from django.utils import timezone

from app.models import SurveySubmission, Response

logger = logging.getLogger(__name__)


async def send_telegram_message(message: str, submission_id: int = None) -> bool:
    """
    Send a message to the configured Telegram chat.
    
    Args:
        message: Formatted message text to send
        submission_id: ID of the submission to create admin link (optional)
        
    Returns:
        bool: True if sent successfully, False otherwise
    """
    token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
    chat_id = getattr(settings, 'TELEGRAM_CHAT_ID', None)
    enabled = getattr(settings, 'TELEGRAM_NOTIFICATIONS_ENABLED', False)

    if not all([token, chat_id, enabled]):
        logger.warning(
            "Telegram notifications are not configured properly. "
            "Make sure TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, and "
            "TELEGRAM_NOTIFICATIONS_ENABLED are set in settings."
        )
        return False

    try:
        bot = Bot(token=token)

        # Create inline keyboard with buttons if submission_id is provided
        keyboard = None
        if submission_id:
            keyboard = await create_submission_keyboard(submission_id)

        await bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=keyboard
        )
        await bot.session.close()
        return True
    except Exception as e:
        logger.error(f"Failed to send Telegram notification: {e}")
        return False


@sync_to_async
def get_submission_data(submission_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        submission_id: ID –∑–∞—è–≤–∫–∏
        
    Returns:
        tuple: (submission, responses)
    """
    submission = SurveySubmission.objects.get(id=submission_id)
    responses = (
        Response.objects
        .filter(submission_id=submission_id)
        .select_related('question', 'question__field_type')
        .prefetch_related('selected_options', 'selected_options__parent')
        .order_by('question_id')
    )
    return submission, list(responses)


async def format_submission_notification(submission_id: int) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è field_key –≤–º–µ—Å—Ç–æ question.title,
    —Å –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º.
    """
    try:
        submission, responses = await get_submission_data(submission_id)
        current_time = timezone.now().strftime("%d.%m.%Y %H:%M:%S")

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        separator = "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

        # –®–∞–ø–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_lines = [
            "*üìã YANGI ARIZA*",
            separator,
            f"*Ariza ID:* #{submission_id}",
            f"*Vaqt:* {current_time}",
            f"*Holati:* {submission.get_status_display()}",
            "",
            "*Ma'lumotlar:*",
            separator
        ]

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
        for response in responses:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º field_key (–µ—Å–ª–∏ –Ω–µ—Ç, –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤—ã–≤–∞–µ–º—Å—è question.title)
            field_key = (response.question.field_type.field_key 
                        if response.question.field_type 
                        else response.question.title)

            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            if response.question.input_type == 'text':
                message_lines.append(f"""  ‚Ä¢ *{field_key}:* {response.text_answer or "Ko'rsatilmagan"}""")
                continue

            # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π (–µ—Å–ª–∏ —ç—Ç–æ —á–µ–∫–±–æ–∫—Å—ã, —Å–µ–ª–µ–∫—Ç—ã –∏ —Ç.–¥.)
            selected_options = list(response.selected_options.all())

            if selected_options:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º, –ø–æ—Ç–æ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ
                sorted_options = sorted(selected_options, key=lambda opt: opt.parent is None)

                if len(sorted_options) > 1:
                    message_lines.append(f"  ‚Ä¢ *{field_key}:*")
                    for option in sorted_options:
                        # –ï—Å–ª–∏ —É –æ–ø—Ü–∏–∏ –µ—Å—Ç—å has_custom_input –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
                        if option.has_custom_input and response.text_answer:
                            if option.parent:
                                message_lines.append(f"    ‚ó¶ {option.parent.text} ‚Üí {response.text_answer}")
                            else:
                                message_lines.append(f"    ‚ó¶ {response.text_answer}")
                        else:
                            if option.parent:
                                message_lines.append(f"    ‚ó¶ {option.parent.text} ‚Üí {option.text}")
                            else:
                                message_lines.append(f"    ‚ó¶ {option.text}")
                else:
                    option = sorted_options[0]
                    # –ï—Å–ª–∏ —É –æ–ø—Ü–∏–∏ –µ—Å—Ç—å has_custom_input –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
                    if option.has_custom_input and response.text_answer:
                        if option.parent:
                            message_lines.append(f"  ‚Ä¢ *{field_key}:* {option.parent.text} ‚Üí {response.text_answer}")
                        else:
                            message_lines.append(f"  ‚Ä¢ *{field_key}:* {response.text_answer}")
                    else:
                        if option.parent:
                            message_lines.append(f"  ‚Ä¢ *{field_key}:* {option.parent.text} ‚Üí {option.text}")
                        else:
                            message_lines.append(f"  ‚Ä¢ *{field_key}:* {option.text}")

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª
            else:
                message_lines.append(f"  ‚Ä¢ *{field_key}:* Ko'rsatilmagan")

        # –î–æ–±–∞–≤–∏–º –Ω–∏–∂–Ω—é—é —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
        message_lines.append(separator)

        # –ó–∞–∫—Ä—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_lines.append("")
        message_lines.append("_Batafsil ma'lumot uchun admin panelni tekshiring._")

        return "\n".join(message_lines)

    except Exception as e:
        logger.error(f"Error formatting submission notification: {e}")
        return (
            f"*üîî YANGI ARIZA #{submission_id}*\n\n"
            "Yangi ariza kelib tushdi. "
            "Batafsil ma'lumot uchun admin panelni tekshiring."
        )


async def notify_new_submission(submission_id: int) -> None:
    """
    Send notification about new submission.
    This function runs asynchronously and can be called from Django signals.
    
    Args:
        submission_id: ID of the submission
    """
    try:
        message = await format_submission_notification(submission_id)
        await send_telegram_message(message, submission_id)
        logger.info(f"Telegram notification sent for submission #{submission_id}")
    except Exception as e:
        logger.error(f"Failed to send submission notification: {e}")


def notify_new_submission_async(submission_id: int) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤ Telegram.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.
    
    Args:
        submission_id: ID –∑–∞—è–≤–∫–∏
    """
    async def run_async():
        await notify_new_submission(submission_id)

    def run_in_thread():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(run_async())
        loop.close()

    thread = threading.Thread(
        target=run_in_thread,
        daemon=True  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
    )
    thread.start()
    logger.info(f"Started background notification thread for submission #{submission_id}")


@sync_to_async
def get_submission_and_update_status(submission_id: int, new_status: str) -> 'SurveySubmission':
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å.
    
    Args:
        submission_id: ID –∑–∞—è–≤–∫–∏
        new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        
    Returns:
        SurveySubmission: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
    """
    submission = SurveySubmission.objects.get(id=submission_id)
    submission.status = new_status
    submission.save(update_fields=['status'])
    return submission


async def handle_status_callback(callback_query: CallbackQuery, state) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.
    
    Args:
        callback_query: –û–±—ä–µ–∫—Ç callback query –æ—Ç Telegram
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    try:
        action, *params = callback_query.data.split(':')
        
        if action == 'show_status':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
            submission_id = int(params[0])
            keyboard = await create_status_selection_keyboard(submission_id, state)
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
            
        elif action == 'select_status':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            submission_id, new_status = params
            await state.update_data(**{f'temp_status_{submission_id}': new_status})
            keyboard = await create_status_selection_keyboard(submission_id, state)
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
            
        elif action == 'apply_status':
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            submission_id = int(params[0])
            data = await state.get_data()
            new_status = data.get(f'temp_status_{submission_id}')
            
            if new_status:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await get_submission_and_update_status(submission_id, new_status)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = await format_submission_notification(submission_id)
                keyboard = await create_submission_keyboard(submission_id)
                
                await callback_query.message.edit_text(
                    text=message,
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=keyboard
                )
                
                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                await state.update_data(**{f'temp_status_{submission_id}': None})
                await callback_query.answer("Status yangilandi")
            else:
                await callback_query.answer("Iltimos, avval statusni tanlang")
                
        elif action == 'back_to_main':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
            submission_id = int(params[0])
            keyboard = await create_submission_keyboard(submission_id)
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await state.update_data(**{f'temp_status_{submission_id}': None})
            
    except Exception as e:
        logger.error(f"Failed to handle status callback: {e}")
        await callback_query.answer("Status yangilashda xatolik yuz berdi")


@sync_to_async
def get_submission_status(submission_id: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.
    
    Args:
        submission_id: ID –∑–∞—è–≤–∫–∏
        
    Returns:
        str: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    """
    submission = SurveySubmission.objects.get(id=submission_id)
    return submission.get_status_display()


async def create_submission_keyboard(submission_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞—è–≤–∫–∏.
    
    Args:
        submission_id: ID –∑–∞—è–≤–∫–∏
        
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    base_url = getattr(settings, 'BASE_URL', 'http://localhost:8000')
    admin_url = f"{base_url}/admin/app/surveysubmission/{submission_id}/change/"
    current_status = await get_submission_status(submission_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton(text=f"Status: {current_status}", callback_data=f"show_status:{submission_id}"),
            InlineKeyboardButton(text="Admin panelda ko'rish", url=admin_url)
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def create_status_selection_keyboard(submission_id: int, state) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞.
    
    Args:
        submission_id: ID –∑–∞—è–≤–∫–∏
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_status = data.get(f'temp_status_{submission_id}')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    for status_value, status_label in SurveySubmission.Status.choices:
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É
        label = f"‚úì {str(status_label)}" if status_value == selected_status else str(status_label)
        keyboard.append([InlineKeyboardButton(
            text=label,
            callback_data=f"select_status:{submission_id}:{status_value}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –∏ "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"apply_status:{submission_id}"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_main:{submission_id}")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)
