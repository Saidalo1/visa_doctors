"""Telegram notification functionality."""
import asyncio
import logging
import html
import threading
from asgiref.sync import sync_to_async

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from django.conf import settings
from django.utils import timezone

from app.models import SurveySubmission, Response, SubmissionStatus
from bot.states import FilterStates
from app.utils.db_reconnect import with_db_reconnect, with_db_reconnect_async

logger = logging.getLogger(__name__)


async def notify_admin_about_error(bot: Bot, error: Exception, context: str, submission_id: int = None) -> None:
    """
    Send error notification to admin.
    
    Args:
        bot: Bot instance to use for sending message
        error: Exception that occurred
        context: Context where error occurred
        submission_id: Optional submission ID related to error
    """
    try:
        error_text = str(error)
        if len(error_text) > 100:
            error_text = f"...{error_text[-100:]}"  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
            
        message = f"‚ùå Xatolik: {context}\n"
        if submission_id:
            message += f"Ariza ID: #{submission_id}\n"
        message += f"Xatolik: {error_text}"
            
        await bot.send_message(
            chat_id=settings.TELEGRAM_ADMIN_ID,
            text=message
        )
    except Exception as admin_error:
        logger.error(f"Failed to notify admin about error: {admin_error}", exc_info=True)


async def send_telegram_message(message: str, submission_id: int = None) -> bool:
    """
    Send a message to the configured Telegram chat.
    
    Args:
        message: Formatted message text to send
        submission_id: ID of the submission to create admin link (optional)
        
    Returns:
        bool: True if sent successfully, False otherwise
    """
    token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
    chat_id = getattr(settings, 'TELEGRAM_CHAT_ID', None)
    enabled = getattr(settings, 'TELEGRAM_NOTIFICATIONS_ENABLED', False)

    if not all([token, chat_id, enabled]):
        logger.warning(
            "Telegram notifications are not configured properly. "
            "Make sure TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, and "
            "TELEGRAM_NOTIFICATIONS_ENABLED are set in settings."
        )
        return False

    bot = None
    try:
        bot = Bot(token=token)

        # Create inline keyboard with buttons if submission_id is provided
        keyboard = None
        if submission_id:
            keyboard = await create_submission_keyboard(submission_id)

        await bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard,
            disable_web_page_preview=True  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–æ–∫
        )
        return True
    except Exception as e:
        logger.error(f"Failed to send Telegram notification: {e}")
        if bot:
            await notify_admin_about_error(
                bot=bot,
                error=e,
                context="Guruhga xabar yuborib bo'lmadi",
                submission_id=submission_id
            )
        return False
    finally:
        if bot:
            await bot.session.close()


@sync_to_async
def get_submission_data(submission_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    
    Args:
        submission_id: ID –∑–∞—è–≤–∫–∏
        
    Returns:
        tuple: (submission, responses)
    """
    submission = SurveySubmission.objects.get(id=submission_id)
    responses = (
        Response.objects
        .filter(submission_id=submission_id)
        .select_related('question', 'question__field_type')
        .prefetch_related('selected_options', 'selected_options__parent')
        .order_by('question_id')
    )
    return submission, list(responses)


async def format_submission_notification(submission_id: int) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è field_key –≤–º–µ—Å—Ç–æ question.title,
    —Å –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º.
    """
    try:
        submission, responses = await get_submission_data(submission_id)
        current_time = timezone.now().strftime("%d.%m.%Y %H:%M:%S")

        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        separator = "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

        # –®–∞–ø–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_lines = [
            "<b>üìã YANGI ARIZA</b>",
            separator,
            f"<b>Ariza ID:</b> #{submission_id}",
            f"<b>Vaqt:</b> {current_time}",
            f"<b>Holati:</b> {html.escape(submission.status.code)}",
            "",
            "<b>Ma'lumotlar:</b>",
            separator
        ]

        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
        for response in responses:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º field_key (–µ—Å–ª–∏ –Ω–µ—Ç, –ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤—ã–≤–∞–µ–º—Å—è question.title)
            field_key = (response.question.field_type.field_key 
                        if response.question.field_type 
                        else response.question.title)

            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            if response.question.input_type == 'text':
                safe_key = html.escape(field_key)
                safe_value = html.escape(response.text_answer or "Ko'rsatilmagan")
                message_lines.append(f"""  ‚Ä¢ <b>{safe_key}:</b> {safe_value}""")
                continue

            # –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π (–µ—Å–ª–∏ —ç—Ç–æ —á–µ–∫–±–æ–∫—Å—ã, —Å–µ–ª–µ–∫—Ç—ã –∏ —Ç.–¥.)
            selected_options = list(response.selected_options.all())

            if selected_options:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º, –ø–æ—Ç–æ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ
                sorted_options = sorted(selected_options, key=lambda opt: opt.parent is None)

                if len(sorted_options) > 1:
                    safe_key = html.escape(field_key)
                    message_lines.append(f"  ‚Ä¢ <b>{safe_key}:</b>")
                    for option in sorted_options:
                        # –ï—Å–ª–∏ —É –æ–ø—Ü–∏–∏ –µ—Å—Ç—å has_custom_input –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
                        if option.has_custom_input and response.text_answer:
                            if option.parent:
                                parent_text = html.escape(option.parent.text)
                                answer_text = html.escape(response.text_answer)
                                message_lines.append(f"    ‚ó¶ {parent_text} ‚Üí {answer_text}")
                            else:
                                answer_text = html.escape(response.text_answer)
                                message_lines.append(f"    ‚ó¶ {answer_text}")
                        else:
                            if option.parent:
                                parent_text = html.escape(option.parent.text)
                                option_text = html.escape(option.text)
                                message_lines.append(f"    ‚ó¶ {parent_text} ‚Üí {option_text}")
                            else:
                                option_text = html.escape(option.text)
                                message_lines.append(f"    ‚ó¶ {option_text}")
                else:
                    option = sorted_options[0]
                    # –ï—Å–ª–∏ —É –æ–ø—Ü–∏–∏ –µ—Å—Ç—å has_custom_input –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥
                    if option.has_custom_input and response.text_answer:
                        if option.parent:
                            safe_key = html.escape(field_key)
                            parent_text = html.escape(option.parent.text)
                            answer_text = html.escape(response.text_answer)
                            message_lines.append(f"  ‚Ä¢ <b>{safe_key}:</b> {parent_text} ‚Üí {answer_text}")
                        else:
                            safe_key = html.escape(field_key)
                            answer_text = html.escape(response.text_answer)
                            message_lines.append(f"  ‚Ä¢ <b>{safe_key}:</b> {answer_text}")
                    else:
                        if option.parent:
                            safe_key = html.escape(field_key)
                            parent_text = html.escape(option.parent.text)
                            option_text = html.escape(option.text)
                            message_lines.append(f"  ‚Ä¢ <b>{safe_key}:</b> {parent_text} ‚Üí {option_text}")
                        else:
                            safe_key = html.escape(field_key)
                            option_text = html.escape(option.text)
                            message_lines.append(f"  ‚Ä¢ <b>{safe_key}:</b> {option_text}")

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª
            else:
                safe_key = html.escape(field_key)
                message_lines.append(f"  ‚Ä¢ <b>{safe_key}:</b> Ko'rsatilmagan")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if submission.comment:
            message_lines.extend([
                "",
                "<b>üí¨ Izoh:</b>",
                separator,
                html.escape(submission.comment)
            ])

        # –î–æ–±–∞–≤–∏–º –Ω–∏–∂–Ω—é—é —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω—É—é –ª–∏–Ω–∏—é
        message_lines.append(separator)

        # –ó–∞–∫—Ä—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_lines.append("")
        message_lines.append("<i>Batafsil ma'lumot uchun admin panelni tekshiring.</i>")

        return "\n".join(message_lines)

    except Exception as e:
        logger.error(f"Error formatting submission notification: {e}")
        return (
            f"<b>üîî YANGI ARIZA #{submission_id}</b>\n\n"
            "Yangi ariza kelib tushdi. "
            "Batafsil ma'lumot uchun admin panelni tekshiring."
        )


async def notify_new_submission(submission_id: int) -> None:
    """
    Send notification about new submission.
    This function runs asynchronously and can be called from Django signals.
    
    Args:
        submission_id: ID of the submission
    """
    bot = Bot(token=settings.TELEGRAM_BOT_TOKEN)
    try:
        message = await format_submission_notification(submission_id)
        await send_telegram_message(message, submission_id)
        logger.info(f"Telegram notification sent for submission #{submission_id}")
    except Exception as e:
        logger.error(f"Failed to send submission notification: {e}")
        await notify_admin_about_error(
            bot=bot,
            error=e,
            context="Yangi ariza haqida xabar yuborib bo'lmadi",
            submission_id=submission_id
        )
    finally:
        await bot.session.close()


def notify_new_submission_async(submission_id: int) -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –≤ Telegram.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.
    
    Args:
        submission_id: ID –∑–∞—è–≤–∫–∏
    """
    async def run_async():
        await notify_new_submission(submission_id)

    def run_in_thread():
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(run_async())
        loop.close()

    thread = threading.Thread(
        target=run_in_thread,
        daemon=True  # –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
    )
    thread.start()
    logger.info(f"Started background notification thread for submission #{submission_id}")


@sync_to_async
def get_submission_by_id(submission_id: int) -> 'SurveySubmission':
    """Get submission by ID."""
    return SurveySubmission.objects.get(id=submission_id)


@sync_to_async
@with_db_reconnect(max_attempts=3, backoff_time=0.5)
def get_submission_and_update_status(submission_id: int, new_status: str = None, comment: str = None) -> 'SurveySubmission':
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    
    Args:
        submission_id: ID –∑–∞—è–≤–∫–∏
        new_status: –ö–æ–¥ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        comment: –ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        SurveySubmission: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∑–∞—è–≤–∫–∏
    """
    submission = SurveySubmission.objects.select_related('status').get(id=submission_id)
    update_fields = []
    
    if new_status:
        try:
            status_obj = SubmissionStatus.objects.get(code=new_status)
            submission.status = status_obj
            update_fields.append('status')
        except SubmissionStatus.DoesNotExist:
            logger.error(f"Status with code '{new_status}' not found")
            raise ValueError(f"Status with code '{new_status}' not found")
        
    if comment is not None:
        submission.comment = comment
        update_fields.append('comment')
        
    if update_fields:
        submission.save(update_fields=update_fields)
        
    return submission


async def handle_comment_callback(callback_query: CallbackQuery, state: FSMContext):
    """Handle comment editing callbacks."""
    try:
        # Get action and parameters
        action, *params = callback_query.data.split(':')
        
        if action == 'edit_comment':
            # Handle comment editing
            submission_id = int(params[0])
            
            # Store submission id and original message id for editing
            await state.update_data(
                editing_submission_id=submission_id,
                original_message_id=callback_query.message.message_id
            )
            await state.set_state(FilterStates.editing_comment)
            
            # Create keyboard with back button
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è Orqaga", callback_data=f"comment_back:{submission_id}")]
            ])
            
            await callback_query.message.edit_text(
                "Izoh qoldiring:",
                reply_markup=keyboard
            )
            await callback_query.answer()
            
        elif action == 'comment_back':
            # Regenerate submission text and keyboard
            submission_id = int(params[0])
            message_text = await format_submission_notification(submission_id)
            keyboard = await create_submission_keyboard(submission_id)
            await callback_query.message.edit_text(
                message_text,
                reply_markup=keyboard,
                parse_mode=ParseMode.HTML,
                disable_web_page_preview=True
            )
            
            await state.clear()
            await callback_query.answer()
            
    except Exception as e:
        logger.error(f"Failed to handle comment callback: {e}")
        await callback_query.answer("‚ùå Xatolik yuz berdi")


async def handle_status_callback(callback_query: CallbackQuery, state: FSMContext):
    """Handle status selection and update callbacks."""
    try:
        # Get action and parameters
        action, *params = callback_query.data.split(':')

        if action == 'show_status':
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
            submission_id = int(params[0])
            keyboard = await create_status_selection_keyboard(submission_id, state)
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)

        elif action == 'select_status':
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            submission_id, new_status = params
            await state.update_data(**{f'temp_status_{submission_id}': new_status})
            keyboard = await create_status_selection_keyboard(submission_id, state)
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)

        elif action == 'apply_status':
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            submission_id = int(params[0])
            data = await state.get_data()
            new_status = data.get(f'temp_status_{submission_id}')

            if new_status:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await get_submission_and_update_status(submission_id, new_status)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = await format_submission_notification(submission_id)
                keyboard = await create_submission_keyboard(submission_id)

                await callback_query.message.edit_text(
                    text=message,
                    parse_mode=ParseMode.HTML,
                    reply_markup=keyboard,
                    disable_web_page_preview=True
                )

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                await state.update_data(**{f'temp_status_{submission_id}': None})
                await callback_query.answer("Status yangilandi")
            else:
                await callback_query.answer("Iltimos, avval statusni tanlang")

        elif action == 'back_to_main':
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–µ–Ω—é
            submission_id = int(params[0])
            keyboard = await create_submission_keyboard(submission_id)
            await callback_query.message.edit_reply_markup(reply_markup=keyboard)

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            await state.update_data(**{f'temp_status_{submission_id}': None})

    except Exception as e:
        logger.error(f"Failed to handle status callback: {e}")
        await callback_query.answer("Status yangilashda xatolik yuz berdi")


@sync_to_async
def get_submission_status(submission_id: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.
    
    Args:
        submission_id: ID –∑–∞—è–≤–∫–∏
        
    Returns:
        str: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    """
    submission = SurveySubmission.objects.get(id=submission_id)
    return submission.status.name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º name –≤–º–µ—Å—Ç–æ —Å–∞–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞


async def create_submission_keyboard(submission_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∑–∞—è–≤–∫–∏.
    
    Args:
        submission_id: ID –∑–∞—è–≤–∫–∏
        
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∏ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    base_url = getattr(settings, 'BASE_URL', 'http://localhost:8000')
    admin_url = f"{base_url}/admin/app/surveysubmission/{submission_id}/change/"
    current_status = await get_submission_status(submission_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [
            InlineKeyboardButton(text=f"Status: {current_status}", callback_data=f"show_status:{submission_id}"),
            InlineKeyboardButton(text="Admin panelda ko'rish", url=admin_url)
        ],
        [
            InlineKeyboardButton(text="Izoh o'zgartirish", callback_data=f"edit_comment:{submission_id}")
        ]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@sync_to_async
def get_all_statuses():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    return list(SubmissionStatus.objects.values_list('code', 'name'))

async def create_status_selection_keyboard(submission_id: int, state) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞.
    
    Args:
        submission_id: ID –∑–∞—è–≤–∫–∏
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        
    Returns:
        InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    selected_status = data.get(f'temp_status_{submission_id}')
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    statuses = await get_all_statuses()
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    for status_code, status_name in statuses:
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å—Ç–∞—Ç—É—Å—É
        label = f"‚úì {status_name}" if status_code == selected_status else status_name
        keyboard.append([InlineKeyboardButton(
            text=label,
            callback_data=f"select_status:{submission_id}:{status_code}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –∏ "–ù–∞–∑–∞–¥"
    keyboard.append([
        InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"apply_status:{submission_id}"),
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_main:{submission_id}")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)
